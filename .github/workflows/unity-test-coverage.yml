name: Unity Test Coverage

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    name: Run Tests and Generate Coverage
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          lfs: true
          submodules: 'true'
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0.x'
      
      - name: Install NuGetForUnity CLI Tool
        run: dotnet tool install --global NuGetForUnity.Cli
      
      - name: Restore NuGet Packages
        run: nugetforunity restore .
      
      - name: Cache Library
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: Library-
      
      - name: Run Unity Tests and Generate Coverage
        uses: game-ci/unity-test-runner@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: .
          testMode: editmode
          customParameters: -enableCodeCoverage -coverageResultsPath=CodeCoverage -coverageOptions=generateHtmlReport;generateBadgeReport;assemblyFilters:+EconomicsGame.*,-*Tests*,-*.Tests*
          
      - name: Debug Coverage Output
        if: always()
        run: |
          echo "=== Project Root Directory ==="
          ls -la
          
          echo "=== Looking for CodeCoverage directory ==="
          find . -name "CodeCoverage" -type d
          
          echo "=== CodeCoverage Contents ==="
          if [ -d "CodeCoverage" ]; then
            ls -la CodeCoverage
            find CodeCoverage -type f -name "*.xml" -exec echo "Found XML: {}" \;
            find CodeCoverage -type f -name "*.json" -exec echo "Found JSON: {}" \;
            find CodeCoverage -type f -name "*.html" -exec echo "Found HTML: {}" \;
          fi
          
          echo "=== Artifacts Contents ==="
          if [ -d "artifacts" ]; then
            ls -la artifacts
            find artifacts -type f | sort
          fi
      
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Test Results
          path: artifacts
          
      - name: Upload Coverage Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Coverage Results
          path: CodeCoverage
      
      - name: Process Unity Coverage for Codecov
        if: always()
        run: |
          echo "Processing Unity coverage for Codecov..."
          
          # Check if CodeCoverage directory exists
          if [ ! -d "CodeCoverage" ]; then
            echo "CodeCoverage directory not found"
            exit 1
          fi
          
          # Look for coverage files
          COVERAGE_XML=$(find CodeCoverage -name "*.xml" -type f | head -1)
          COVERAGE_JSON=$(find CodeCoverage -name "*.json" -type f | head -1)
          
          echo "Found XML: $COVERAGE_XML"
          echo "Found JSON: $COVERAGE_JSON"
          
          # Unity typically generates coverage in a specific format
          # We need to convert it to a format Codecov can understand
          if [ -n "$COVERAGE_XML" ]; then
            echo "Using XML coverage file: $COVERAGE_XML"
            cp "$COVERAGE_XML" ./coverage.xml
            
            # Check if the XML is in the correct format for Codecov
            if grep -q "coverage" "$COVERAGE_XML"; then
              echo "XML appears to be in correct format"
            else
              echo "Warning: XML may not be in expected format"
            fi
          elif [ -n "$COVERAGE_JSON" ]; then
            echo "Using JSON coverage file: $COVERAGE_JSON"
            cp "$COVERAGE_JSON" ./coverage.json
          else
            echo "No coverage files found"
            exit 1
          fi
          
          # List the coverage file
          ls -la coverage.* || echo "No coverage files copied"
          
          # Show first few lines of coverage file for debugging
          if [ -f "coverage.xml" ]; then
            echo "=== First 20 lines of coverage.xml ==="
            head -20 coverage.xml
          fi
      
      - name: Convert Unity Coverage to Codecov Format
        if: always()
        run: |
          echo "Converting Unity coverage to Codecov format..."
          
          # Check if we have a coverage file
          if [ ! -f "coverage.xml" ] && [ ! -f "coverage.json" ]; then
            echo "No coverage file found to convert"
            exit 1
          fi
          
          # Unity generates coverage in OpenCover format
          # We need to convert it to the format Codecov expects
          if [ -f "coverage.xml" ]; then
            echo "Converting Unity OpenCover XML to Codecov format..."
            
            # Check if it's OpenCover format (CoverageSession)
            if grep -q "CoverageSession" coverage.xml; then
              echo "Detected OpenCover format, converting to Codecov format..."
              
              # Run the conversion script
              python3 convert_coverage.py
              
              echo "Conversion completed"
            else
              echo "Not OpenCover format, using as-is"
            fi
          fi
          
          # Show the final coverage file
          if [ -f "coverage.xml" ]; then
            echo "=== Final coverage.xml content (first 50 lines) ==="
            head -50 coverage.xml
          fi
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        if: always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unity
          name: unity-coverage
          fail_ci_if_error: false
          verbose: true
          debug: true
